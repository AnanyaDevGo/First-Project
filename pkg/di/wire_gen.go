// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"CrocsClub/pkg/api"
	"CrocsClub/pkg/api/handler"
	"CrocsClub/pkg/config"
	"CrocsClub/pkg/db"
	"CrocsClub/pkg/helper"
	"CrocsClub/pkg/repository"
	"CrocsClub/pkg/usecase"
)

// Injectors from wire.go:

func InitializeAPI(cfg config.Config) (*http.ServerHTTP, error) {
	gormDB, err := db.ConnectDatabase(cfg)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(gormDB)
	otpRepository := repository.NewOtpRepository(gormDB)
	inventoryRepository := repository.NewInventoryRepository(gormDB)
	orderRepository := repository.NewOrderRepository(gormDB)
	interfacesHelper := helper.NewHelper(cfg)
	userUseCase := usecase.NewUserUseCase(userRepository, cfg, otpRepository, inventoryRepository, orderRepository, interfacesHelper)
	userHandler := handler.NewUserHandler(userUseCase)
	adminRepository := repository.NewAdminRepository(gormDB)
	adminUseCase := usecase.NewAdminUseCase(adminRepository, interfacesHelper)
	adminHandler := handler.NewAdminHandler(adminUseCase)
	categoryRepository := repository.NewCategoryRepository(gormDB)
	categoryUseCase := usecase.NewCategoryUseCase(categoryRepository, interfacesHelper)
	categoryHandler := handler.NewCategoryHandler(categoryUseCase)
	otpUseCase := usecase.NewOtpUseCase(cfg, otpRepository, interfacesHelper)
	otpHandler := handler.NewOtpHandler(otpUseCase)
	inventoryUseCase := usecase.NewInventoryUseCase(inventoryRepository, interfacesHelper, categoryRepository)
	inventoryHandler := handler.NewInventoryHandler(inventoryUseCase)
	cartRepository := repository.NewCartRepository(gormDB)
	cartUseCase := usecase.NewCartUseCase(cartRepository, inventoryRepository, userUseCase, adminRepository)
	cartHandler := handler.NewCartHandler(cartUseCase)
	couponRepository := repository.NewCouponRepository(gormDB)
	orderUseCase := usecase.NewOrderUseCase(orderRepository, userUseCase, cartRepository, couponRepository)
	orderHandler := handler.NewOrderHandler(orderUseCase)
	paymentRepository := repository.NewPaymentRepository(gormDB)
	paymentUseCase := usecase.NewPaymentUseCase(paymentRepository)
	paymentHandler := handler.NewPaymentHandler(paymentUseCase)
	walletRepository := repository.NewWalletRepository(gormDB)
	walletUseCase := usecase.NewWalletUseCase(walletRepository)
	walletHandler := handler.NewWalletHandler(walletUseCase)
	couponUseCase := usecase.NewCouponUsecase(couponRepository)
	couponHandler := handler.NewCouponHandler(couponUseCase)
	offerRepository := repository.NewOfferRepository(gormDB)
	offerUsecase := usecase.NewOferUsecase(offerRepository)
	offerHandler := handler.NewOfferHandler(offerUsecase)
	serverHTTP := http.NewServerHTTP(userHandler, adminHandler, categoryHandler, otpHandler, inventoryHandler, cartHandler, orderHandler, paymentHandler, walletHandler, couponHandler, offerHandler)
	return serverHTTP, nil
}
