definitions:
  domain.Category:
    properties:
      category:
        type: string
      id:
        type: integer
    type: object
  domain.Coupon:
    properties:
      discount_percentage:
        type: integer
      id:
        type: integer
      is_available:
        type: boolean
      minimum_price:
        type: integer
      name:
        type: string
    type: object
  domain.Inventories:
    properties:
      category:
        $ref: '#/definitions/domain.Category'
      category_id:
        type: integer
      id:
        type: integer
      price:
        type: number
      product_image:
        type: string
      product_name:
        type: string
      size:
        type: string
      stock:
        type: integer
    type: object
  models.AddAddress:
    properties:
      city:
        type: string
      house_name:
        type: string
      name:
        type: string
      phone:
        type: string
      pin:
        type: string
      state:
        type: string
      street:
        type: string
    required:
    - city
    - house_name
    - name
    - pin
    - state
    - street
    type: object
  models.AdminLogin:
    properties:
      email:
        type: string
      password:
        maxLength: 20
        minLength: 8
        type: string
    required:
    - email
    type: object
  models.Cart:
    properties:
      products_id:
        type: integer
      quantity:
        type: integer
    type: object
  models.CategorytOfferResp:
    properties:
      category_id:
        type: integer
      discount_percentage:
        type: integer
      offer_name:
        type: string
    required:
    - category_id
    - discount_percentage
    - offer_name
    type: object
  models.ChangePassword:
    properties:
      old_password:
        type: string
      password:
        type: string
      resetted_password:
        type: string
    type: object
  models.Edit:
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  models.InventoryUpdate:
    properties:
      product_id:
        type: integer
      stock:
        type: integer
    type: object
  models.NewPaymentMethod:
    properties:
      payment_method:
        type: string
    type: object
  models.OTPData:
    properties:
      phone:
        type: string
    required:
    - phone
    type: object
  models.Order:
    properties:
      address_id:
        type: integer
      coupon_id:
        type: integer
      payment_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.ProductOfferResp:
    properties:
      discount_percentage:
        type: integer
      offer_name:
        type: string
      product_id:
        type: integer
    required:
    - discount_percentage
    - offer_name
    - product_id
    type: object
  models.SearchItems:
    properties:
      product_name:
        type: string
    type: object
  models.SetNewName:
    properties:
      current:
        type: string
      new:
        type: string
    type: object
  models.TokenUsers:
    properties:
      token:
        type: string
      users:
        $ref: '#/definitions/models.UserDetailsResponse'
    type: object
  models.UserDetails:
    properties:
      confirmpassword:
        type: string
      email:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
    type: object
  models.UserDetailsResponse:
    properties:
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
    type: object
  models.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.VerifyData:
    properties:
      code:
        type: string
      phone:
        type: string
    required:
    - code
    - phone
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
info:
  contact:
    name: API Support
  description: Watch Hive is an E-commerce platform to purchase Watch
  title: Go + Gin E-Commerce API Watch Hive
  version: 1.0.0
paths:
  /admin/dashboard:
    get:
      description: Retrieve information for the admin dashboard
      responses:
        "200":
          description: Admin dashboard information retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve admin dashboard information
      tags:
      - Admin Dashboard
  /admin/login:
    post:
      consumes:
      - application/json
      description: Authenticate an admin user and get access and refresh tokens.
      parameters:
      - description: Admin login details in JSON format
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Admin authenticated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Cannot authenticate user
          schema:
            $ref: '#/definitions/response.Response'
      summary: Admin Login
      tags:
      - Admin
  /admin/orders:
    get:
      consumes:
      - application/json
      description: Retrieve all orders for admin view.
      parameters:
      - description: Page number for pagination
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all admin orders
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or error retrieving orders
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Admin Orders
      tags:
      - Admin Order Management
  /admin/orders/approve:
    post:
      consumes:
      - application/json
      description: Approve an order by updating its status.
      parameters:
      - description: Order ID to be approved
        in: query
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully approved the order
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or error approving the order
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Approve Order
      tags:
      - Admin Order Management
  /admin/orders/print-invoice:
    get:
      consumes:
      - application/json
      description: Generate and download the invoice for a specific order.
      parameters:
      - description: Order ID for which the invoice should be generated
        in: query
        name: order_id
        required: true
        type: string
      produces:
      - application/pdf
      responses:
        "200":
          description: Invoice PDF
          schema:
            type: file
        "400":
          description: Error in processing the request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error generating or downloading the invoice
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Print Invoice
      tags:
      - User Order Management
  /admin/orders/return:
    post:
      consumes:
      - application/json
      description: Initiate the return process for an order by updating its status.
      parameters:
      - description: Order ID to be returned
        in: query
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully initiated the return process
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error initiating the return process
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Return Order
      tags:
      - User Order Management
  /admin/payment-methods:
    delete:
      description: Delete a payment method by its ID
      parameters:
      - description: Payment method ID to delete
        in: query
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: Successfully deleted the payment method
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete a payment method
      tags:
      - Admin Payment Management
    get:
      description: Get a list of all payment methods
      responses:
        "200":
          description: Successfully retrieved the list of payment methods
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get a list of payment methods
      tags:
      - Admin Payment Management
    post:
      consumes:
      - application/json
      description: Add a new payment method using the provided details
      parameters:
      - description: New payment method details
        in: body
        name: method
        required: true
        schema:
          $ref: '#/definitions/models.NewPaymentMethod'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added the payment method
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add a new payment method
      tags:
      - Admin Payment Management
  /admin/sales-report:
    get:
      description: Generate a sales report based on the specified start and end dates.
      parameters:
      - description: 'Start date (format: DD-MM-YYYY)'
        in: query
        name: start
        required: true
        type: string
      - description: 'End date (format: DD-MM-YYYY)'
        in: query
        name: end
        required: true
        type: string
      responses:
        "200":
          description: Successfully retrieved the sales report
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Generate a sales report by date range
      tags:
      - Admin Dashboard
  /admin/users:
    get:
      description: Retrieve a list of users with optional pagination.
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      responses:
        "200":
          description: Successfully retrieved the list of users
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve a list of users
      tags:
      - Admin User Management
  /admin/users/block:
    put:
      description: Block a user by its ID
      parameters:
      - description: User ID to block
        in: query
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Successfully blocked the user
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Block a user
      tags:
      - Admin User Management
  /admin/users/unblock:
    put:
      description: Unblock a user by its ID
      parameters:
      - description: User ID to unblock
        in: query
        name: id
        required: true
        type: string
      responses:
        "200":
          description: Successfully unblocked the user
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or incorrect format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Unblock a user
      tags:
      - Admin User Management
  /cart/add:
    post:
      consumes:
      - application/json
      description: Add a product to the user's shopping cart.
      parameters:
      - description: User ID obtained from authentication
        in: header
        name: id
        required: true
        type: integer
      - description: Product details to be added to the cart in JSON format
        in: body
        name: cart
        required: true
        schema:
          $ref: '#/definitions/models.Cart'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added to cart
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: User ID not found in the context, User ID not in the right
            format, Failed to parse request JSON, or Could not add to the cart
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add to Cart
      tags:
      - User Cart Management
  /cart/checkout:
    get:
      consumes:
      - application/json
      description: Process the checkout for the user and retrieve the checkout details.
      parameters:
      - description: User ID obtained from authentication
        in: header
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved checkout details
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Could not open checkout
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Checkout
      tags:
      - User Cart Management
  /category/add:
    post:
      consumes:
      - application/json
      description: Add a new category.
      parameters:
      - description: Category details to be added in JSON format
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/domain.Category'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added Category
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided are in the wrong format or Could not add the
            Category
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add Category
      tags:
      - Admin Category Management
  /category/delete:
    delete:
      consumes:
      - application/json
      description: Delete an existing category.
      parameters:
      - description: ID of the category to be deleted
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted the Category
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided are in the wrong format or Could not delete
            the Category
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Delete Category
      tags:
      - Admin Category Management
  /category/get:
    get:
      consumes:
      - application/json
      description: Retrieve all categories.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully got all categories
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided are in the wrong format or Could not retrieve
            categories
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Categories
      tags:
      - Admin Category Management
  /category/update:
    put:
      consumes:
      - application/json
      description: Update the name of an existing category.
      parameters:
      - description: Category name details in JSON format
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SetNewName'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully renamed the category
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided are in the wrong format or Could not update
            the Category
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update Category
      tags:
      - Admin Category Management
  /check-out/order:
    post:
      consumes:
      - application/json
      description: Place an order for items in the user's cart.
      parameters:
      - description: Order details including address, payment method, and coupon ID
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "200":
          description: Order placed successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or error placing the order
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Order Items From Cart
      tags:
      - User Order Management
  /coupon/add:
    post:
      consumes:
      - application/json
      description: Add a new coupon.
      parameters:
      - description: Coupon details in JSON format
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.Coupon'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added coupon
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Field provided in the wrong format or Cannot add coupon
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add Coupon
      tags:
      - Admin Coupon Management
  /coupon/edit:
    put:
      consumes:
      - application/json
      description: Edit an existing coupon.
      parameters:
      - description: Coupon details in JSON format
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.Coupon'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully edited coupon
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Field provided in the wrong format or Cannot edit coupon
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Edit Coupon
      tags:
      - Admin Coupon Management
  /coupon/get:
    get:
      consumes:
      - application/json
      description: Retrieve all coupons.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully got all coupons
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Error in getting coupons
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Coupons
      tags:
      - Admin Coupon Management
  /inventory/add:
    post:
      consumes:
      - multipart/form-data
      description: Add a new inventory item.
      parameters:
      - description: ID of the category for the inventory
        in: formData
        name: category_id
        required: true
        type: integer
      - description: Name of the product
        in: formData
        name: product_name
        required: true
        type: string
      - description: Size of the product
        in: formData
        name: size
        required: true
        type: string
      - description: Stock quantity of the product
        in: formData
        name: stock
        required: true
        type: integer
      - description: Price of the product
        in: formData
        name: price
        required: true
        type: number
      - description: Image file of the product
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added Product
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or fields provided in the wrong format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to add the product
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add Inventory
      tags:
      - Admin Product Management
  /inventory/delete:
    delete:
      consumes:
      - application/json
      description: Delete an existing inventory item.
      parameters:
      - description: ID of the inventory item to delete
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Inventory item successfully deleted
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or fields provided in the wrong format
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Inventory item not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to delete the inventory item
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete Inventory
      tags:
      - Admin Product Management
  /inventory/edit:
    put:
      consumes:
      - application/json
      description: Edit details of an existing inventory item.
      parameters:
      - description: ID of the inventory item to edit
        in: query
        name: inventory_id
        required: true
        type: integer
      - description: Updated inventory details in JSON format
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.Inventories'
      produces:
      - application/json
      responses:
        "200":
          description: Inventory item successfully edited
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or fields provided in the wrong format
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Inventory item not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to edit the inventory item
          schema:
            $ref: '#/definitions/response.Response'
      summary: Edit Inventory
      tags:
      - Admin Product Management
  /inventory/filter:
    get:
      consumes:
      - application/json
      description: Retrieve a list of products based on the specified category ID.
      parameters:
      - description: Category ID for filtering products
        in: query
        name: category_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Products list retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid category ID or products cannot be displayed
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Error in retrieving products
          schema:
            $ref: '#/definitions/response.Response'
      summary: Filter Products by Category
      tags:
      - User Product Management
  /inventory/list:
    get:
      consumes:
      - application/json
      description: Get a paginated list of products.
      parameters:
      - description: 'Page number for pagination (default: 1)'
        in: query
        name: page
        type: integer
      - description: 'Number of products per page (default: 5)'
        in: query
        name: per_page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product list retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or fields provided in the wrong format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to retrieve the product list
          schema:
            $ref: '#/definitions/response.Response'
      summary: List Products
      tags:
      - Admin Product Management
  /inventory/search:
    post:
      consumes:
      - application/json
      description: Retrieve product details based on a prefix search for the product
        name.
      parameters:
      - description: Prefix for product name search
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.SearchItems'
      produces:
      - application/json
      responses:
        "200":
          description: Product details retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or fields provided in the wrong format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Could not retrieve products by prefix search
          schema:
            $ref: '#/definitions/response.Response'
      summary: Search Products
      tags:
      - User Product Management
  /inventory/show:
    get:
      consumes:
      - application/json
      description: Retrieve details of an individual product based on its ID.
      parameters:
      - description: Product ID to retrieve details
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product details retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or path variables in the wrong format
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Show Individual Products
      tags:
      - Admin Product Management
  /inventory/update:
    put:
      consumes:
      - application/json
      description: Update the stock of an existing inventory item.
      parameters:
      - description: Inventory update details in JSON format
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.InventoryUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: Inventory stock successfully updated
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or fields provided in the wrong format
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Inventory item not found
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to update the inventory stock
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update Inventory
      tags:
      - Admin Product Management
  /offers:
    post:
      consumes:
      - application/json
      description: Add a new product offer.
      parameters:
      - description: Product offer details in JSON format
        in: body
        name: productOffer
        required: true
        schema:
          $ref: '#/definitions/models.ProductOfferResp'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully added offer
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or constraints not satisfied
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to add offer
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add Product Offer
      tags:
      - Admin Offer Management
  /offers/category:
    get:
      consumes:
      - application/json
      description: Retrieve all category offers.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully got all offers
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or fields provided in the wrong format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to retrieve offers
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get Category Offer
      tags:
      - Admin Offer Management
    post:
      consumes:
      - application/json
      description: Add a new category offer.
      parameters:
      - description: Category offer details in JSON format
        in: body
        name: categoryOffer
        required: true
        schema:
          $ref: '#/definitions/models.CategorytOfferResp'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully added offer
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or constraints not satisfied
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to add offer
          schema:
            $ref: '#/definitions/response.Response'
      summary: Add Category Offer
      tags:
      - Admin Offer Management
  /offers/category/expire:
    put:
      consumes:
      - application/json
      description: Expire a category offer by providing its ID.
      parameters:
      - description: ID of the category offer to expire
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully made category offer invalid
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or fields provided in the wrong format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to expire category offer
          schema:
            $ref: '#/definitions/response.Response'
      summary: Expire Category Offer
      tags:
      - Admin Offer Management
  /offers/product:
    get:
      consumes:
      - application/json
      description: Retrieve all product offers.
      produces:
      - application/json
      responses:
        "200":
          description: Successfully got all offers
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or fields provided in the wrong format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to retrieve offers
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get Product Offer
      tags:
      - Admin Offer Management
  /offers/product/expire:
    put:
      consumes:
      - application/json
      description: Expire a product offer by providing its ID.
      parameters:
      - description: ID of the product offer to expire
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully made product offer invalid
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request format or fields provided in the wrong format
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to expire product offer
          schema:
            $ref: '#/definitions/response.Response'
      summary: Expire Product Offer
      tags:
      - Admin Offer Management
  /order/cancel:
    post:
      consumes:
      - application/json
      description: Cancel an order based on the provided order ID.
      parameters:
      - description: Order ID
        in: query
        name: order_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Order successfully canceled
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or error canceling the order
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Cancel Order
      tags:
      - User Order Management
  /order/get:
    get:
      consumes:
      - application/json
      description: Retrieve orders based on the provided order ID.
      parameters:
      - description: Order ID
        in: query
        name: order_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or error retrieving orders
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get Orders
      tags:
      - User Order Management
  /orders/all:
    get:
      consumes:
      - application/json
      description: Retrieve all orders for the authenticated user.
      parameters:
      - description: Page number for pagination (default is 1)
        in: query
        name: page
        type: integer
      - description: Number of items per page (default is 10)
        in: query
        name: count
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved all orders
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or error retrieving orders
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Get All Orders
      tags:
      - User Order Management
  /otp/send:
    post:
      consumes:
      - application/json
      description: Send OTP to the specified phone number for verification.
      parameters:
      - description: Phone number details in JSON format
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.OTPData'
      produces:
      - application/json
      responses:
        "200":
          description: OTP sent successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in wrong format or Could not send OTP
          schema:
            $ref: '#/definitions/response.Response'
      summary: Send OTP
      tags:
      - User
  /otp/verify:
    post:
      consumes:
      - application/json
      description: Verify the provided OTP code for user authentication.
      parameters:
      - description: Verification code details in JSON format
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.VerifyData'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully verified OTP
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Fields provided in wrong format or Could not verify OTP
          schema:
            $ref: '#/definitions/response.Response'
      summary: Verify OTP
      tags:
      - User
  /user/address:
    post:
      consumes:
      - application/json
      description: Add a new address to the user's profile by providing address details
      parameters:
      - description: User ID
        in: header
        name: id
        required: true
        type: integer
      - description: Address details to be added
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/models.AddAddress'
      produces:
      - application/json
      responses:
        "200":
          description: Address successfully added
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or missing parameters
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden, user not authenticated
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Add new address
      tags:
      - User Profile Management
  /user/address/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve user addresses by ID
      parameters:
      - description: User ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: User addresses retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve user addresses
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get user addresses
      tags:
      - User Profile Management
  /user/cart:
    get:
      consumes:
      - application/json
      description: Retrieve the products in the user's shopping cart
      produces:
      - application/json
      responses:
        "200":
          description: Products in the shopping cart retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to retrieve the shopping cart
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Retrieve user's shopping cart
      tags:
      - User Cart Management
  /user/cart/remove:
    delete:
      consumes:
      - application/json
      description: Remove a product from the user's shopping cart by specifying cart
        and inventory IDs
      parameters:
      - description: ID of the shopping cart
        in: query
        name: cart_id
        required: true
        type: integer
      - description: ID of the inventory to be removed from the cart
        in: query
        name: inventory_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Product successfully removed from the shopping cart
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or missing parameters
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Product or cart not found
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Remove product from cart
      tags:
      - User Cart Management
  /user/change-password/{id}:
    post:
      consumes:
      - application/json
      description: Change user password by ID
      parameters:
      - description: User ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      - description: Change password payload
        in: body
        name: changePasswordBody
        required: true
        schema:
          $ref: '#/definitions/models.ChangePassword'
      produces:
      - application/json
      responses:
        "200":
          description: Password changed successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Failed to change user password
          schema:
            $ref: '#/definitions/response.Response'
      summary: Change user password
      tags:
      - User Profile Management
  /user/login:
    post:
      consumes:
      - application/json
      description: Logs in a user with provided credentials
      parameters:
      - description: User login details in JSON format
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: User details logged in successfully
          schema:
            $ref: '#/definitions/models.UserDetails'
        "400":
          description: Invalid request or constraints not satisfied
          schema:
            $ref: '#/definitions/response.Response'
        "401":
          description: 'Unauthorized: Invalid credentials'
          schema:
            $ref: '#/definitions/models.UserDetails'
      summary: Log in a user
      tags:
      - User
  /user/profile{id}:
    get:
      consumes:
      - application/json
      description: Retrieve user details by ID
      produces:
      - application/json
      responses:
        "200":
          description: User details retrieved successfully
          schema:
            $ref: '#/definitions/models.UserDetailsResponse'
        "400":
          description: Failed to retrieve user details
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get user details
      tags:
      - User Profile Management
  /user/signup:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User details in JSON format
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserDetails'
      produces:
      - application/json
      responses:
        "201":
          description: User signed up successfully
          schema:
            $ref: '#/definitions/models.UserDetails'
        "400":
          description: Invalid request or constraints not satisfied
          schema:
            $ref: '#/definitions/models.TokenUsers'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.TokenUsers'
      summary: Register a new user
      tags:
      - User
  /user/update-quantity:
    put:
      consumes:
      - application/json
      description: Update the quantity of a product in the user's cart
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: integer
      - description: Inventory ID of the product
        in: query
        name: inventory
        required: true
        type: integer
      - description: New quantity of the product
        in: query
        name: quantity
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Quantity updated successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid request or missing parameters
          schema:
            $ref: '#/definitions/response.Response'
        "403":
          description: Forbidden, user not authenticated
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Update product quantity
      tags:
      - User Cart Management
  /users/edit:
    put:
      consumes:
      - application/json
      description: Edit details of the authenticated user.
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User details to be edited
        in: body
        name: edit
        required: true
        schema:
          $ref: '#/definitions/models.Edit'
      produces:
      - application/json
      responses:
        "201":
          description: Details edited successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid input or error updating values
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerTokenAuth: []
      summary: Edit User Details
      tags:
      - User Profile Management
  /wallet:
    get:
      consumes:
      - application/json
      description: Retrieve wallet details for the authenticated user.
      parameters:
      - description: User ID
        in: header
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Wallet details retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: user_id not found or invalid user_id type
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to retrieve details
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get Wallet
      tags:
      - User Wallet Management
  /wallet/history:
    get:
      consumes:
      - application/json
      description: Retrieve the transaction history for the authenticated user's wallet.
      parameters:
      - description: User ID
        in: header
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Wallet transaction history retrieved successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: user_id not found or invalid user_id type
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to retrieve transaction history
          schema:
            $ref: '#/definitions/response.Response'
      summary: Wallet History
      tags:
      - User Wallet Management
securityDefinitions:
  BearerTokenAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
